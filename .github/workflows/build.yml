name: C/C++ CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      matrix:
        compiler:
          - { name: Clang-simulated, cc: clang, cxx: clang++, failure-simulation: ON}
          - { name: GNU-real, cc: gcc-10, cxx: g++-10, failure-simulation: OFF}
        build-mode: [Debug, Release]
    timeout-minutes: 60
    steps:
    - uses: actions/checkout@v2
    - name: submodules
      run: git submodule init && git submodule update
    - uses: actions/cache@v2
      id: ulfm-cache
      with:
        path: ~/ulfm
        key: ${{ runner.os }}
    - name: ulfm
      if: steps.ulfm-cache.outputs.cache-hit != 'true'
      run: git clone --recursive https://bitbucket.org/icldistcomp/ulfm2.git && cd ulfm2 && ./autogen.pl && ./configure --prefix="$HOME/ulfm" --enable-mpi-fortran=no --with-pmi2 --with-ucx=no && make -j && make install
    - name: mkdir
      run: mkdir build && cd build
    - name: cmake
      run: cd build && PATH="$HOME/ulfm/bin:$PATH"; CPATH="$HOME/ulfm/src:$CPATH"; LD_LIBRARY_PATH="$HOME/ulfm/lib:$LD_LIBRARY_PATH"; MPI_ROOT="$HOME/ulfm"; cmake .. -DCMAKE_BUILD_TYPE=${{ matrix.build-mode }} -DSIMULATE_FAILURES=${{ matrix.compiler.failure-simulation }} -DWARNINGS_ARE_ERRORS=ON -DCMAKE_CXX_COMPILER=${{ matrix.compiler.cxx }} -DCMAKE_C_COMPILER=${{ matrix.compiler.cc }}
    - name: make
      run: cd build && make -j all
    - name: Setup Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'
    - name: Cache pip
      uses: actions/cache@v2
      with:
        # This path is specific to Ubuntu
        path: ~/.cache/pip
        # Look to see if there is a cache hit for the corresponding requirements file
        key: ${{ runner.os }}-pip-networkit
        restore-keys: |
          ${{ runner.os }}-pip-
          ${{ runner.os }}-
    - name: Install networkit dependencies
      run: pip install cython numpy scipy cython wheel
    - name: Install networkit
      run: pip install networkit
    - name: make check
      if: (matrix.compiler.name == 'Clang-simulated' && matrix.build-mode == 'Release') || (matrix.compiler.name == 'GNU-real' && matrix.build-mode == 'Debug')
      run: cd build && make check
